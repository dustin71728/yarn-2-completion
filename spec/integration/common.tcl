# This Expect script was generated by autoexpect on Wed Jun 23 06:20:03 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.
proc setup {} {
  set force_conservative 0  ;# set to 1 to force conservative mode even if
  ;# script wasn't run conservatively originally
  if {$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
      sleep .1
      exp_send -s -- $arg
    }
  }
}

set default_bash_error {bash:[^\r]+}
set default_bash_prompt {bash-.+$}

proc send_and_expect [list \
  send_command \
  {correct_regexp ""} \
  [list error_regexp $default_bash_error] \
  [list prompt $default_bash_prompt] \
  [list skip_matching_send_command 0] \
  ] {
    global default_bash_error
  set match_send_cmommand 0

  if {[string length $error_regexp] == 0} {
    set error_regexp $default_bash_error
  }

  send -- $send_command
  expect {
    -- $send_command {
      set match_send_cmommand 1
      if {[string length $correct_regexp] > 0} {
        expect {
          -re $correct_regexp {}
          -re $prompt {
            exit 1
          }
          default {
            exit 2
          }
        }
      }
      exp_continue
    }
    -re $error_regexp {
      exit 1
    }
    -re $prompt {
      if {$skip_matching_send_command == 0 && $match_send_cmommand != 1} {
        exit 3
      }
    }
    default {
      exit 2
    }
  }
}
